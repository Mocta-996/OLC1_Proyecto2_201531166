/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,15],$V2=[1,16],$V3=[1,18],$V4=[1,39],$V5=[1,20],$V6=[1,21],$V7=[1,23],$V8=[1,24],$V9=[1,32],$Va=[1,34],$Vb=[1,35],$Vc=[1,33],$Vd=[1,36],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,31],$Vl=[1,37],$Vm=[1,38],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,49],$Vx=[1,50],$Vy=[1,51],$Vz=[1,52],$VA=[1,53],$VB=[2,5,19,20,21,22,37,38,41,42,43,46,47,48,49,50,53,57,59,61,62,63,64,66,68,70,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],$VC=[18,39,40,69,70,71,72,73,74,75,76,77,78],$VD=[2,110],$VE=[1,66],$VF=[1,64],$VG=[1,65],$VH=[1,76],$VI=[1,77],$VJ=[1,68],$VK=[1,69],$VL=[1,70],$VM=[1,71],$VN=[1,72],$VO=[1,73],$VP=[1,74],$VQ=[1,75],$VR=[1,78],$VS=[1,79],$VT=[1,87],$VU=[1,90],$VV=[32,40,41],$VW=[18,24,25,33,37,39,40,51,52,69,70,71,72,73,74,75,76,77,78],$VX=[1,107],$VY=[18,25,29,32],$VZ=[2,30],$V_=[1,114],$V$=[1,115],$V01=[1,149],$V11=[18,24,25,33,37,39,40,51,52,69,70,75,76,77,78],$V21=[24,25],$V31=[1,172],$V41=[18,24,25,33,37,39,40,51,52,69,70,71,72,74,75,76,77,78],$V51=[18,24,25,33,37,51,52,75,76,77,78],$V61=[18,24,25,33,37,39,40,51,52,75,76,77,78],$V71=[1,192],$V81=[2,5,19,20,21,22,37,38,41,42,43,46,47,48,49,50,53,56,57,59,61,62,63,64,66,68,70,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],$V91=[1,213],$Va1=[2,111],$Vb1=[1,251],$Vc1=[18,24],$Vd1=[25,37],$Ve1=[37,59,61],$Vf1=[2,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DEFPRINT":7,"DECLARACION":8,"ASIGNACION":9,"SENTENCIAIF":10,"SENTENCIASWITCH":11,"CICLOWHILE":12,"SENTENCIAFOR":13,"SENTENCIADOWHILE":14,"SENTENCIAFUNCION":15,"LLAMADAFUNCION":16,"RETORNAR":17,"PTCOMA":18,"BREAK":19,"CONTINUE":20,"RWRITE":21,"PARIZQ":22,"LISTAEXPRESION":23,"PARDER":24,"COMA":25,"EXPRESION":26,"TIPOS":27,"DECLARAVARIOS":28,"IGUAL":29,"TERNARIO":30,"CASTEO":31,"CORIZR":32,"CORDER":33,"NEW":34,"LLAVEIZQ":35,"LISTAVALORES":36,"LLAVEDER":37,"DYNAMICLIST":38,"MENORQUE":39,"MAYORQUE":40,"ID":41,"APPEND":42,"SETVALUE":43,"ASIGNACION2":44,"TIPOCASTEO":45,"RENTERO":46,"RDOUBLE":47,"RCHAR":48,"RSTRING":49,"RBOOLEAN":50,"KLEENE":51,"DOSPUNTOS":52,"IF":53,"STATEMENT":54,"SENTENCIAELSE":55,"ELSE":56,"SWITCH":57,"LISTACASOS":58,"CASE":59,"CASESTATEMENT":60,"DEFAULT":61,"WHILE":62,"FOR":63,"DO":64,"PARAMETROS":65,"VOID":66,"LISTAPARAMETROS":67,"RETURN":68,"MAS":69,"MENOS":70,"POR":71,"DIVISION":72,"POTENCIA":73,"MODULO":74,"IGUALACION":75,"DIFERENCIACION":76,"AND":77,"OR":78,"NOT":79,"ENTERO":80,"DECIMAL":81,"CADENA":82,"CARACTER":83,"TRUE":84,"FALSE":85,"GETVALUE":86,"TOLOWER":87,"TOUPPER":88,"LENGTH":89,"TRUNCATE":90,"ROUND":91,"TYPEOF":92,"TOSTRING":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PTCOMA",19:"BREAK",20:"CONTINUE",21:"RWRITE",22:"PARIZQ",24:"PARDER",25:"COMA",29:"IGUAL",32:"CORIZR",33:"CORDER",34:"NEW",35:"LLAVEIZQ",37:"LLAVEDER",38:"DYNAMICLIST",39:"MENORQUE",40:"MAYORQUE",41:"ID",42:"APPEND",43:"SETVALUE",46:"RENTERO",47:"RDOUBLE",48:"RCHAR",49:"RSTRING",50:"RBOOLEAN",51:"KLEENE",52:"DOSPUNTOS",53:"IF",56:"ELSE",57:"SWITCH",59:"CASE",61:"DEFAULT",62:"WHILE",63:"FOR",64:"DO",66:"VOID",68:"RETURN",69:"MAS",70:"MENOS",71:"POR",72:"DIVISION",73:"POTENCIA",74:"MODULO",75:"IGUALACION",76:"DIFERENCIACION",77:"AND",78:"OR",79:"NOT",80:"ENTERO",81:"DECIMAL",82:"CADENA",83:"CARACTER",84:"TRUE",85:"FALSE",86:"GETVALUE",87:"TOLOWER",88:"TOUPPER",89:"LENGTH",90:"TRUNCATE",91:"ROUND",92:"TYPEOF",93:"TOSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[7,5],[23,3],[23,1],[8,3],[8,5],[8,5],[8,5],[8,4],[8,11],[8,9],[8,12],[28,3],[28,1],[36,3],[36,1],[9,4],[9,4],[9,4],[9,3],[9,2],[9,7],[9,7],[9,9],[44,3],[44,3],[44,3],[31,4],[45,1],[45,1],[45,1],[27,1],[27,1],[27,1],[27,1],[27,1],[30,5],[10,6],[55,2],[55,2],[55,0],[54,3],[54,2],[11,7],[58,4],[58,5],[58,3],[58,4],[60,1],[60,0],[12,5],[13,8],[13,8],[13,8],[13,8],[14,7],[15,6],[15,5],[15,6],[15,5],[65,4],[65,2],[16,4],[16,5],[67,3],[67,1],[17,1],[17,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,4],[26,4],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,4],[26,6],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 30: case 32:
 this.$ = [$$[$0]]; 
break;
case 4: case 5:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = $$[$0];
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13:
 this.$ =$$[$0]; 
break;
case 14:
 this.$ =$$[$0-1]; 
break;
case 15:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 16:
this.$=new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 17:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
     new Error_(this._$.first_line, this._$.first_column, 'Sintactico', 'Error sintactico:'  + yytext);
break;
case 18:
 this.$ = new Writeline($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 19: case 81:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 20: case 82:
this.$ = [$$[$0]];
break;
case 21:
 {this.$ = new Declarar($$[$0-2],$$[$0-1],null,_$[$0-2].first_line, _$[$0-2].first_column)}   
break;
case 22: case 23: case 24:
 {this.$ = new Declarar($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)} 
break;
case 25:
 {this.$ = new Declarar($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)} 
break;
case 26:
 {this.$ = new DeclararVector($$[$0-10],$$[$0-9],null,_$[$0-10].first_line, _$[$0-10].first_column,$$[$0-2],$$[$0-4])} 
break;
case 27:
 {this.$ = new DeclararVector($$[$0-8],$$[$0-7],$$[$0-2],_$[$0-8].first_line, _$[$0-8].first_column,null,null)} 
break;
case 28:
 {this.$ = new DeclararLista($$[$0-9],$$[$0-7],$$[$0-2],[],_$[$0-11].first_line, _$[$0-11].first_column)} 
break;
case 29: case 31:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 33:
 {this.$ = new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)}  
break;
case 34: case 35:
 {this.$ = new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)} 
break;
case 36: case 42: case 43:
 {this.$ = new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)} 
break;
case 38:
 {this.$ = new AsignarVector($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)} 
break;
case 39:
 {this.$ = new AsignarLista($$[$0-4],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column)} 
break;
case 40:
 {this.$ = new ModificarLista($$[$0-6],$$[$0-4],$$[$0-2],_$[$0-8].first_line, _$[$0-8].first_column)} 
break;
case 41:
 {this.$ = new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)}  
break;
case 44:
 {this.$ = new Casteo($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column,null)} 
break;
case 45: case 48:
this.$ = 0;
break;
case 46: case 50:
this.$ =3;
break;
case 47: case 51:
this.$ = 4;
break;
case 49:
this.$ = 1;
break;
case 52:
this.$ = 2;
break;
case 53:
this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 54:
this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 55:
this.$ =$$[$0]
break;
case 56:
this.$ = $$[$0]
break;
case 57:
this.$ = null
break;
case 58:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 59:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 60:
this.$ = new SwitchCase($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 61:
this.$=[];this.$.push([$$[$0-2],$$[$0]]);
break;
case 62:
this.$=$$[$0-4];this.$.push([$$[$0-2],$$[$0]]);
break;
case 63:
this.$.push([new Default(_$[$0-2].first_line, _$[$0-2].first_column),$$[$0]]);
break;
case 64:
this.$=$$[$0-3];this.$.push([new Default(_$[$0-3].first_line, _$[$0-3].first_column),$$[$0]]);
break;
case 65:
 this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 66:
this.$ = new Statement([], _$[$0].first_line, _$[$0].first_column)
break;
case 67:
 this.$ = new While($$[$0-2], $$[$0],  _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 68: case 69: case 70: case 71:
 this.$ = new For($$[$0-5], $$[$0-4],$$[$0-2],$$[$0], _$[$0-7].first_line,_$[$0-7].first_column);
break;
case 72:
 this.$ = new DoWhile($$[$0-2], $$[$0-5],  _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 73:
this.$ = new Funcion( $$[$0-4], $$[$0],$$[$0-2],'funcion', _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-5]);
break;
case 74:
this.$ = new Funcion( $$[$0-3], $$[$0],[],'funcion', _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-4]);
break;
case 75:
this.$ = new Funcion( $$[$0-4], $$[$0],$$[$0-2],'void', _$[$0-5].first_line, _$[$0-5].first_column,null);
break;
case 76:
this.$ = new Funcion( $$[$0-3], $$[$0],[],'void', _$[$0-4].first_line, _$[$0-4].first_column,null);
break;
case 77:
 $$[$0-3].push([$$[$0-1],$$[$0]]); this.$ =$$[$0-3] 
break;
case 78:
this.$ =[];this.$.push([$$[$0-1],$$[$0]])
break;
case 79:
this.$ = new LlamadaFuncion($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 80:
 this.$ = new LlamadaFuncion($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 83:
this.$=new Return(_$[$0].first_line, _$[$0].first_column,null)
break;
case 84:
this.$=new Return(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0])
break;
case 85:
 this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 87:
 this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 88:
 this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
this.$= new Aritmetica($$[$0],new Primitivo("-1",TipoPrimitivo.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 92:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALIGUALACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 93:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENCIACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 94:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 95:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 96:
this.$= new Relacional($$[$0-3],$$[$0],TipoRelacional.MENORIGUAL, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 97:
this.$= new Relacional($$[$0-3],$$[$0],TipoRelacional.MAYORIGUAL, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 98:
 this.$ = new Logicos($$[$0-2],$$[$0], TipoLogico.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Logicos( $$[$0-2],$$[$0],TipoLogico.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Logicos($$[$0],$$[$0], TipoLogico.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 101:
 this.$ = new Inc_dec(0,$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 102:
 this.$ = new Inc_dec(1,$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 103:
this.$ = $$[$0-1]
break;
case 104:
 this.$ = new Primitivo($$[$0],TipoPrimitivo.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 105:
 this.$ = new Primitivo( $$[$0],TipoPrimitivo.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 106:
 this.$ = new Primitivo( $$[$0],TipoPrimitivo.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 107:
 this.$ = new Primitivo( $$[$0],TipoPrimitivo.CARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 108: case 109:
 this.$ = new Primitivo( $$[$0],TipoPrimitivo.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 110:
this.$= new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 111:
this.$= new AccesoVector($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 112:
 {this.$ = new AccesoLista($$[$0-3],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column)} 
break;
case 113:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 114:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 115:
this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 116:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 117:
this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 118:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 119:
this.$ = new Tostring($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,26:22,27:19,38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{1:[3]},{2:$V0,5:[1,54],6:55,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,26:22,27:19,38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VB,[2,3]),o($VB,[2,4]),o($VB,[2,5]),o($VB,[2,6]),o($VB,[2,7]),o($VB,[2,8]),o($VB,[2,9]),o($VB,[2,10]),o($VB,[2,11]),o($VB,[2,12]),o($VB,[2,13]),{18:[1,56]},{18:[1,57]},{18:[1,58]},{18:[1,59]},{22:[1,60]},{28:61,41:[1,62]},{39:[1,63]},o($VC,$VD,{22:$VE,29:$VF,32:$VG}),{18:[1,67],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{22:[1,80]},{22:[1,81]},{22:[1,82]},{22:[1,83]},{22:[1,84]},{22:[1,85]},{35:$VT,54:86},{41:[1,88]},{18:[2,83],22:$V4,26:89,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VV,[2,48]),o($VV,[2,49]),o($VV,[2,50]),o($VV,[2,51]),o($VV,[2,52]),{22:$V4,26:91,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:92,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:93,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VW,[2,104]),o($VW,[2,105]),o($VW,[2,106]),o($VW,[2,107]),o($VW,[2,108]),o($VW,[2,109]),{22:[1,94]},{22:[1,95]},{22:[1,96]},{22:[1,97]},{22:[1,98]},{22:[1,99]},{22:[1,100]},{22:[1,101]},{1:[2,1]},o($VB,[2,2]),o($VB,[2,14]),o($VB,[2,15]),o($VB,[2,16]),o($VB,[2,17]),{22:$V4,23:102,26:103,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:[1,104],25:$VX,29:[1,105],32:[1,106]},o($VY,$VZ,{22:[1,108]}),{27:109,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{16:113,22:$V_,26:110,30:111,31:112,41:$V$,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:116,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,24:[1,117],26:119,41:$VU,67:118,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VB,[2,37]),{22:$V4,26:120,41:$VU,69:[1,121],70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:122,41:$VU,70:[1,123],79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:124,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:125,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:126,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:127,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:128,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:129,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:130,29:[1,131],41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:132,29:[1,133],41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:134,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:135,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{41:[1,136]},{41:[1,137]},{22:$V4,26:138,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:139,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:140,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:141,9:142,22:$V4,26:22,27:143,38:$V5,41:[1,144],42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{62:[1,145]},{2:$V0,4:146,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,26:22,27:19,37:[1,147],38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:[1,148]},{18:[2,84],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},o($VW,$VD,{32:$V01}),o($V11,[2,91],{71:$VL,72:$VM,73:$VN,74:$VO}),o($VW,[2,100]),{24:[1,150],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{41:[1,151]},{22:$V4,26:152,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:153,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:154,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:155,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:156,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:157,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:158,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{24:[1,159],25:[1,160]},o($V21,[2,20],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),o($VB,[2,21]),{16:164,22:$V_,26:161,30:162,31:163,41:$V$,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{33:[1,165]},{41:[1,166]},{24:[1,168],27:169,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,65:167},{40:[1,170]},{18:[1,171],39:$VH,40:$VI,51:$V31,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{18:[1,173]},{18:[1,174]},o($VB,[2,36]),{22:$V4,26:93,41:$VU,45:175,46:[1,176],47:[1,177],48:[1,178],70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o([18,39,40,51,69,70,71,72,73,74,75,76,77,78],$VD,{22:$VE,32:$V01}),{33:[1,179],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{18:[1,180]},{24:[1,181],25:[1,182]},o($V21,[2,82],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),o($V11,[2,85],{71:$VL,72:$VM,73:$VN,74:$VO}),o($VW,[2,101]),o($V11,[2,86],{71:$VL,72:$VM,73:$VN,74:$VO}),o($VW,[2,102],{26:91,22:$V4,41:$VU,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA}),o($V41,[2,87],{73:$VN}),o($V41,[2,88],{73:$VN}),o($VW,[2,89]),o($V41,[2,90],{73:$VN}),o($V51,[2,92],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO}),o($V51,[2,93],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO}),o($V61,[2,94],{69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO}),{22:$V4,26:183,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($V61,[2,95],{69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO}),{22:$V4,26:184,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o([18,24,25,33,37,51,52,77,78],[2,98],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ}),o([18,24,25,33,37,51,52,78],[2,99],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR}),{25:[1,185]},{25:[1,186]},{24:[1,187],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,188],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,189],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{22:$V4,26:190,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:191,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{28:61,41:$V71},o($VC,$VD,{29:$VF,32:$VG}),{22:[1,193]},{2:$V0,6:55,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,26:22,27:19,37:[1,194],38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($V81,[2,59]),{24:[1,196],27:169,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,65:195},{22:$V4,26:197,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VW,[2,103]),{25:[1,198]},{24:[1,199],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,200],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,201],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,202],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,203],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,204],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,205],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{18:[1,206]},{22:$V4,26:207,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:[1,208],39:$VH,40:$VI,51:$V31,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{18:[1,209]},{18:[1,210]},o($VB,[2,25]),{29:[1,211]},o($VY,[2,29]),{24:[1,212],25:$V91},{35:$VT,54:214},{41:[1,215]},{28:216,41:$V71},o($VB,[2,33]),{22:$V4,26:217,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VB,[2,34]),o($VB,[2,35]),{24:[1,218]},{24:[2,45]},{24:[2,46]},{24:[2,47]},o($VC,$Va1,{29:[1,219]}),o($VB,[2,79]),{18:[1,220]},{22:$V4,26:221,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($V61,[2,96],{69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO}),o($V61,[2,97],{69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO}),{22:$V4,26:222,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:223,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{35:$VT,54:224},{35:[1,225]},{35:$VT,54:226},{18:[1,227],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{18:[1,228],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},o($VY,$VZ),{22:$V4,26:229,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($V81,[2,58]),{24:[1,230],25:$V91},{35:$VT,54:231},{33:[1,232],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{22:$V4,26:233,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VW,[2,113]),o($VW,[2,114]),o($VW,[2,115]),o($VW,[2,116]),o($VW,[2,117]),o($VW,[2,118]),o($VW,[2,119]),o($VB,[2,18]),o($V21,[2,19],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),o($VB,[2,22]),o($VB,[2,23]),o($VB,[2,24]),{34:[1,234],35:[1,235]},{35:$VT,54:236},{27:237,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($VB,[2,74]),o($V21,[2,78]),{25:$VX,29:[1,238]},{39:$VH,40:$VI,52:[1,239],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{22:$V4,26:240,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:241,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VB,[2,80]),o($V21,[2,81],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),{24:[1,242],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{25:[1,243],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},o($VB,[2,57],{55:244,56:[1,245]}),{58:246,59:[1,247],61:[1,248]},o($VB,[2,67]),{22:$V4,26:249,41:$Vb1,44:250,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{22:$V4,26:252,41:$Vb1,44:253,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{24:[1,254],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{35:$VT,54:255},o($VB,[2,76]),o($VW,$Va1),{24:[1,256],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{27:257,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{22:$V4,26:259,36:258,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VB,[2,73]),{41:[1,260]},{34:[1,261]},{22:$V4,26:262,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($Vc1,[2,44],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),{18:[1,263],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{18:[1,264]},{22:$V4,26:265,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VB,[2,54]),{10:267,35:$VT,53:$Ve,54:266},{37:[1,268],59:[1,269],61:[1,270]},{22:$V4,26:271,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{52:[1,272]},{24:[1,273],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,274]},o([24,39,40,69,70,71,72,73,74,75,76,77,78],$VD,{29:[1,275],32:$V01}),{24:[1,276],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[1,277]},{18:[1,278]},o($VB,[2,75]),o($VW,[2,112]),{32:[1,279]},{25:[1,281],37:[1,280]},o($Vd1,[2,32],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),o($V21,[2,77]),{38:[1,282]},o($Vc1,[2,53],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),o($VB,[2,38]),o($VB,[2,39]),{24:[1,283],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,60]),{22:$V4,26:284,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{52:[1,285]},{39:$VH,40:$VI,52:[1,286],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},o($Ve1,$Vf1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,27:19,26:22,60:287,4:288,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA}),{35:$VT,54:289},{35:$VT,54:290},{22:$V_,26:291,30:292,31:293,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{35:$VT,54:294},{35:$VT,54:295},o($VB,[2,72]),{22:$V4,26:296,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:[1,297]},{22:$V4,26:298,41:$VU,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{39:[1,299]},{18:[1,300]},{39:$VH,40:$VI,52:[1,301],69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},o($Ve1,$Vf1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,27:19,26:22,4:288,60:302,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA}),o($Ve1,$Vf1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,27:19,26:22,4:288,60:303,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA}),o($Ve1,[2,63]),o($Ve1,[2,65],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,27:19,26:22,6:55,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA}),o($VB,[2,68]),o($VB,[2,70]),{24:[2,41],39:$VH,40:$VI,51:$V31,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},{24:[2,42]},{24:[2,43]},o($VB,[2,69]),o($VB,[2,71]),{33:[1,304],39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS},o($VB,[2,27]),o($Vd1,[2,31],{39:$VH,40:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS}),{27:305,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($VB,[2,40]),o($Ve1,$Vf1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,27:19,26:22,4:288,60:306,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,38:$V5,41:$V6,42:$V7,43:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,53:$Ve,57:$Vf,62:$Vg,63:$Vh,64:$Vi,66:$Vj,68:$Vk,70:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA}),o($Ve1,[2,64]),o($Ve1,[2,61]),{18:[1,307]},{40:[1,308]},o($Ve1,[2,62]),o($VB,[2,26]),{18:[1,309]},o($VB,[2,28])],
defaultActions: {54:[2,1],176:[2,45],177:[2,46],178:[2,47],292:[2,42],293:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Error_ } = require('./Error/Error');
    const {Primitivo,TipoPrimitivo} = require('./Expresion/Primitivo');
    const {Aritmetica, TipoAritmetica} = require('./Expresion/Aritmetica');
    const {Relacional,TipoRelacional} = require('./Expresion/Relacional');
    const {Logicos,TipoLogico} = require('./Expresion/Logicos');
    const {Declarar} = require('./Instruccion/Declarar');
    const {DeclararVector} = require('./Instruccion/DeclararVector');
    const {DeclararLista} = require('./Instruccion/DeclararLista');
    const {Asignar} = require('./Instruccion/Asignar');
    const {AsignarVector} = require('./Instruccion/AsignarVector');
    const {AsignarLista} = require('./Instruccion/AsignarLista');
    const {Ternario} = require('./Instruccion/Ternario');
    const {Acceso} = require('./Expresion/Acceso');
    const {AccesoVector} = require('./Expresion/AccesoVector');
    const {AccesoLista} = require('./Expresion/AccesoLista');
    const {Casteo} = require('./Instruccion/Casteo');
    const {Inc_dec} = require('./Expresion/Inc_dec');
    const {ModificarLista} = require('./Instruccion/ModificarLista');

    const {Writeline} = require('./Instruccion/Writeline');
    const {ToLower} = require('./Instruccion/ToLower');
    const {ToUpper} = require('./Instruccion/ToUpper');
    const {Length} = require('./Instruccion/Length');
    const {Break} = require('./Instruccion/Break');
    const {Continue} = require('./Instruccion/Continue');
    const {Return} = require('./Instruccion/Return');
    const {Truncate} = require('./Instruccion/Truncate');
    const {Round} = require('./Instruccion/Round');
    const {Typeof} = require('./Instruccion/Typeof');
    const {Tostring} = require('./Instruccion/Tostring');

    const {If} = require('./Instruccion/If');
    const {Statement} = require('./Instruccion/Statement');
    const {SwitchCase} = require('./Instruccion/SwitchCase');
    const {Default} = require('./Instruccion/Default');
    const {While} = require('./Instruccion/While');
    const {DoWhile} = require('./Instruccion/DoWhile');
    const {For} = require('./Instruccion/For');

    const {Funcion} = require('./Instruccion/Funcion');
    const {LlamadaFuncion} = require('./Instruccion/LlamadaFuncion');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 18;
break;
case 1:return 22;
break;
case 2:return 24;
break;
case 3:return 'PUNTO';
break;
case 4:return 52;
break;
case 5:return 25;
break;
case 6:return 32;
break;
case 7:return 33;
break;
case 8:return 35;
break;
case 9:return "LLAVEDER";
break;
case 10:return 51;
break;
case 11:return 29;
break;
case 12:return 21;   // funcion de imprimir
break;
case 13:return 84;
break;
case 14:return 85;
break;
case 15:return 34;
break;
case 16:return 38;
break;
case 17:return 42;
break;
case 18:return 86;
break;
case 19:return 43;
break;
case 20:return 87;
break;
case 21:return 88;
break;
case 22:return 89;
break;
case 23:return 53;
break;
case 24:return 56;
break;
case 25:return 57;
break;
case 26:return 59;
break;
case 27:return 19;
break;
case 28:return 61;
break;
case 29:return 62;
break;
case 30:return 63;
break;
case 31:return 64;
break;
case 32:return 66;
break;
case 33:return 20;
break;
case 34:return 68;
break;
case 35:return 90;
break;
case 36:return 91;
break;
case 37:return 92;
break;
case 38:return 93;
break;
case 39:return 69;
break;
case 40:return 70;
break;
case 41:return 71;
break;
case 42:return 72;
break;
case 43:return 73;
break;
case 44:return 74;
break;
case 45:return 75;
break;
case 46:return 76;
break;
case 47:return 39;
break;
case 48:return 'MENORIGUAL';
break;
case 49:return 40;
break;
case 50:return 'MAYORIGUAL';
break;
case 51:return 77;
break;
case 52:return 78;
break;
case 53:return 79;
break;
case 54:return 46;
break;
case 55:return 49;
break;
case 56:return 48;
break;
case 57:return 50;
break;
case 58:return 47;
break;
case 59:
break;
case 60:
break;
case 61:
break;
case 62:
break;
case 63:return 41;
break;
case 64:return 81;
break;
case 65:return 80;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 83; 
break;
case 67:cadena="";this.begin("string");
break;
case 68:cadena+=yy_.yytext;
break;
case 69:cadena+="\"";
break;
case 70:cadena+="\n";
break;
case 71:cadena+="\t";
break;
case 72:cadena+="\\";
break;
case 73:cadena+="\'";
break;
case 74:yy_.yytext=cadena; this.popState(); return 82;
break;
case 75:return 5;
break;
case 76: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                        new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico', 'Error L√©xico:'  + yy_.yytext);
break;
}
},
rules: [/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:=)/i,/^(?:writeline\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:dynamiclist\b)/i,/^(?:append\b)/i,/^(?:getvalue\b)/i,/^(?:setValue\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}